#include<stdio.h>
#include<string.h>
#include<stdlib.h>

typedef struct {
  char name[20];
  char tel[11];
  char email[25];
} address;

typedef struct node{
  address addr;
  struct node *next;
} node;
// 3 global pointer
node *root, *cur, *prev;
int length = 0;

node *newNode(address addr){
  node *new = (node*)malloc(sizeof(node));
  new->addr = addr;
  new->next = NULL;
  return new;
}

void displayNode(node *p){
  if(p == NULL) printf("NULL\n");
  printf("%s\n", p->addr.name);
  printf("%s\n", p->addr.tel);
  printf("%s\n", p->addr.email);
}

void insertAtBeginning(address addr){
  node *node = newNode(addr);
  if(root == NULL) root = node;
  else{
    node->next = root;
    root = node;
  }
  length += 1;
}

void insertAtEnd(address addr){
  node *node = newNode(addr);
  cur = root;
  while(cur->next != NULL){
    cur = cur->next;
  }
  cur->next = node;
  length += 1;
}

void insertAtPos(address addr, int pos){
  if((pos > length) || (pos < 0)){
    printf("pos in 0...length\n");
    return;
  }
  else{
    if(pos == 0){
      insertAtBeginning(addr);
    }
    else if (pos == length){
      insertAtEnd(addr);
    }
    else{
      node *new = newNode(addr);
      cur = root;
      for(int i = 0; i < pos - 1; ++i){
	cur = cur->next;
      }
      new->next = cur->next;
      cur->next = new;
      length += 1;
    }
  }
}

void insertAtCur(address addr){
  node *new = newNode(addr);
  if(root == NULL){
    root = new;
    cur = root;
  }
  else {
    new->next = cur->next;
    cur->next = new;
    prev = cur;
    cur = cur->next;
  }
}

void deleteAtEnd(){
  if(length == 0) printf("The list is empty\n");
  else{
    cur = root;
    prev = root;
    while (cur->next != NULL){
      prev = cur;
      cur = cur->next;
    }
    prev->next = NULL;
    length -= 1;
  }
}

void deleteAtHead(){
  if(length == 0) printf("The list is empty\n");
  else{
    root = root->next;
    length -= 1;
  }
}

void deleteWithNode(node *a){
  if(length == 0) printf("The list is empty\n");
  else{
    cur = root;
    prev = NULL;
    int found = 0;
    while(!found){
      if(cur == a){
	found = 1;
      }
      else if(cur == NULL){
	printf("Node not in list\n");
	return;
      }
      else{
	prev = cur;
	cur = cur->next;
      }
    }
  }
  if(prev == NULL){
    root = cur->next;
  }
  else{
    prev->next = cur->next;
  }
  length -= 1;
}

void deleteWithData(address addr){
  cur = root;
  prev = root;
}

void traversingList(){
  node *p;
  for( p = root; p != NULL; p = p->next)
    displayNode(p);
}


int main(){
  address addr;
  strcpy(addr.name,"Chuong");
  strcpy(addr.email,"chuthechuong@gmail.com");
  strcpy(addr.tel,"0981082834");
  address addr1;
  strcpy(addr1.name,"Thanh");
  strcpy(addr1.email,"daongocthanh@gmail.com");
  strcpy(addr1.tel,"0123456789");
  address addr2;
  strcpy(addr2.name,"Dung");
  strcpy(addr2.email,"ducdung@gmail.com");
  strcpy(addr2.tel,"1234156798");
  root = newNode(addr);
  insertAtBeginning(addr1);
  insertAtPos(addr2, 1);
  traversingList();
  printf("-------delete---------\n");
  deleteAtHead();
  traversingList();
  free(root);
}
